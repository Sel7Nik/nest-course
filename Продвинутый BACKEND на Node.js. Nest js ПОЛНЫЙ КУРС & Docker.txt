Продвинутый BACKEND на Node.js. Nest js ПОЛНЫЙ КУРС & Docker
12 апр. 2021 г.
https://youtu.be/dDeWWQWMM-Y

В этом ролике мы реализуем масштабируемый backend на node js с использованием фреймворка Nest js. В качестве СУБД воспользуемся PostgreSQL в связке с ORM Sequelize на node js. Задокументируем API с помощью SWAGER nest js. По итогу обернем приложение на node js в docker и docker compose.
Backend разработка. Backend для начинающих. Продвинутый backend. Backend уроки. Backend на Javascript. 

Backend Для начинающих - https://youtu.be/tKM44vPHU0U
Fullstack интернет магазин - https://youtu.be/H2GCkRF9eko

Исходный код -
https://github.com/utimur/profi-backend-node-js

Таймкоды:

00:00 - Введение.
02:45 - Разворачиваем приложение.
05:20 - Запуск приложения в режиме разработки.
05:40 - Контроллеры, провайдеры (сервисы), @Module, @Controller, @Injectable.
08:50 - Dependency Injection. Внедрение зависимостей.
09:30 - PostgreSQL. Sequelize. Подключаемся к базе данных.
12:20 - UserModule. UserService. UserController.
13:40 - Конфигурация. development.env, production.env. Переменные окружения.
18:30 - Sequelize. Модель пользователя. @Table, @Column.
22:25 - Запись\Получение. Repository. Работа с БД.
25:30 - Postman
26:30 - Документация API. Swagger.
32:20 - Роли пользователя.
34:45 - Связь между таблицами. Many-to-many. @BelongsToMany, @ForeignKey
44:50 - AuthModule. Регистрация. Авторизация. JWT Токен.
55:20 - Guards. CanActivate. Ограничиваем доступ неавторизованным пользователям. 
01:01:25 - RolesGuard. Roles декоратор. Ограничение доступа пользователю без определенной роли.
01:06:20 - Выдача ролей. Бан пользователя.
01:13:22 - Pipes. Валидация входных данных. Class-validator. @IsString, @IsEmail, @Length
01:20:35 - GLobalPipes.
01:21:50 - Посты. One-to-many. @HasMany.
01:26:07 - FileService. Работа с файлами. Раздача статики.
01:34:35 - Docker. Dockerfile. Docker-compose.
01:40:25 - Итоги   



2:35 глобально установить 
npm i -g @nestjs/cli

=======================================================
2:45 разворачивание-инициализация проекта
nest new project-name
=======================================================

3:00 удаляем все ненужное

3:15 создаем в папке src точку входа файл 
main.ts

3:25 в файле main.ts создаём асинхронную функцию
async function start() {}

вызываем её. Она будет запускать приложение
start()

3:35 создаем константу для определения порта получаемого из системных переменных
const PORT = process.env.PORT || 5000

3:45 создаем экземпляр приложения
const app = await NestFactory.create()

импортируем
import { NestFactory } from "@nestjs/core"

4:00 слушатель порта
await app.listen(PORT, () => console.log(`server started on port = ${PORT}`))

4:30 создание модуля для функции create 
app.module.ts

4:45 помечаем класс декоратором и передаем в него объект
@Module({})

4:55 импортируем 
import { Module } from "@nestjs/common";

5:05 в main.js в NestFactory.create() передаем модуль из app.module
const app = await NestFactory.create(AppModule)

5:10 импортируем
import { AppModule } from "./app.module"

5:20 запускаем приложение в режиме разработки
npm run start:dev

=======================================================
5:40 - Контроллеры, провайдеры (сервисы), @Module, @Controller, @Injectable.
=======================================================

5:40 создаем в папке src файл-Контроллер
app.controller.ts

5:55 создадим и экспортируем class
export class AppController {}

6:00 помечаем декоратором c префиксом адреса
@Controller('/api')

6:10 импортируем 
import { Controller } from "@nestjs/common";

6:20 внутри класса создадим функцию 
getUsers() {
// которая возвращает массив объектов
return [{id:1, name: 'Nik}]
}

6:40 саму функцию помечаем декоратором по типу запроса
  в параметрах указываем путь до эндпоинта
@get('/users')

6:50 регистрация контроллера в модуле
controllers:[AppController]

6:55 импортируем
import { AppController } from "./app.controller";

7:25 провайдеры
providers:[]

7:40 создаем в папке src файл-внешней логики
app.service.ts

7:50 создаем и экспортируем класс
export class AppService{}

7:55 помечаем аннотацией декорируем
@Injectable()

8:00 импортируем
import { Injectable } from "@nestjs/common";

8:05 в классе создаем функцию возвращающую пользователей
getUsers() { return [{ id: 1, name: 'Nik' }] }

8:40 регистрируем контроллер в провайдере
  providers: [AppService]

8:45 импортируем
import { AppService } from "./app.service";

=======================================================
08:50 - Dependency Injection. Внедрение зависимостей.
=======================================================
08:55 в контроллере в constructor указываем сервисы
constructor(private appService: AppService) { }

9:00 импортируем 
import { AppService } from './app.service';

9:05 не создаем объект, а просто пользуемся
return this.appService.getUsers()

=======================================================
09:30 - PostgreSQL. Sequelize. Подключаемся к базе данных.
=======================================================

https://docs.nestjs.com/techniques/database#sequelize-integration
https://sequelize.org/master/manual/getting-started.html
https://habr.com/ru/post/439434/

10:00 скрипт установка зависимостей sequelize
npm install --save @nestjs/sequelize sequelize sequelize-typescript

10:20 скрипт зависимостей # Postgres
npm install --save pg pg-hstore 

10:30 установка типов для sequelize
npm install --save-dev @types/sequelize

10:40 подключение к БД PG
imports: [
    SequelizeModule.forRoot({
      dialect: 'postgres',
      host: 'localhost',
      port: 5432,
      username: 'postgres',
      password: 'root',
      database: 'nest-course',
      models: [],
      autoLoadModels: true

    }),
  ],

11:05 импорт
import { SequelizeModule } from '@nestjs/sequelize'

11:10 проверяем 
dialect: 'postgres', port: 5432,
11:35 добавляем
autoLoadModels: true

11:40 Устанавливаем и настраиваем БД Postgres

11:45 Создаем новую базу данных и подключаемся

=======================================================
12:20 - UserModule. UserService. UserController.
=======================================================
удаляем файлы , зависимости и импорт для 
appService, AppController

12:30 создаем папку user

12:40 генерируем модуль users controller service
nest generate module users
nest generate controller users
nest generate service users

=======================================================
13:40 - Конфигурация. development.env, production.env. Переменные окружения.
=======================================================

13:45 установка пакета
npm i @nestjs/config

14:00 добавляем в импорт путь к файлу конфигурации
ConfigModule.forRoot({ envFilePath: '.env' }),

14:15 создаем этот файл в корне проекта
.env

15:20 constant 
PORT = 7000
POSTGRESS_HOST = localhost
POSTGRESS_USER = postgres
POSTGRESS_DB = nest-course
POSTGRESS_PASSWORD = user
POSTGRESS_PORT = 5433